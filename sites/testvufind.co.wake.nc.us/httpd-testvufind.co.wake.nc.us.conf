<VirtualHost *:80>
    ServerName test.vufind.co.wake.nc.us
    DocumentRoot "/usr/local/vufind-plus/vufind/web"
    CustomLog     /var/log/vufind-plus/testvufind.co.wake.nc.us/access.log combined
    ErrorLog      /var/log/vufind-plus/testvufind.co.wake.nc.us/error.log
    ErrorDocument 404 /Error/Handle404
    
    <Directory /usr/local/vufind-plus/vufind/web/>  
      Order allow,deny
      allow from all
      AllowOverride All
    
      # Uncomment the following lines, if you wish to use the Shibboleth authentication
      # AuthType shibboleth
      # require shibboleth
    
      # Friendly URLs
      #
      # You may need to adjust the RewriteBase to match your VuFind path.
      # You can remove the line if your vufind instance will be located at the web
      # server root.
      #
      <IfModule mod_rewrite.c>
        RewriteEngine On

        RewriteCond %{THE_REQUEST} ^GET\ /MyResearch/
        RewriteRule ^MyResearch/OverdriveHolds /MyAccount/Holds$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/OverdriveCheckedOut /MyAccount/CheckedOut$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/EContentHolds /MyAccount/Holds$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/EContentCheckedOut /MyAccount/CheckedOut$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/(.*) /MyAccount/$1 [L,R=301]

        # Note: The following RewriteRule directives include the [B] flag to escape
        # backreferences.  This prevents encoding problems caused by special characters
        # like & if they show up in ids.  Note that the flag doesn't work in some 
        # versions of Apache prior to 2.2.12; if you run into trouble, try upgrading.
        RewriteRule   ^(MyAccount)/([^/]+)/(.+)$    index.php?module=$1&action=$2&id=$3   [B,L,QSA]
        RewriteRule   ^(Record)/([^/]+)/(.+)$       index.php?module=$1&id=$2&action=$3   [B,L,QSA]
        RewriteRule   ^(Record)/(.+)$               index.php?module=$1&id=$2             [B,L,QSA]
        RewriteRule   ^([^/]+)/(.+)$                index.php?module=$1&action=$2         [B,L,QSA]
      </IfModule>
    
      # Disable Magic Quotes
      php_value magic_quotes_gpc false
    
      # Session Settings
      php_value session.use_cookies  1
      php_value session.use_only_cookies 1
      # important: we want to serialize objects
      php_value session.auto_start 0 
      #php_value session.cookie_secure 1
      # we should check session lifetime in "read" methods
      # since PHP cookies do not "refresh" them during activity
      # hence we leave them alive until browser closes
      php_value session.cookie_lifetime  0
      php_value session.gc_maxlifetime 6000
    
      # Dynamic CSS
      # AddType application/x-httpd-php .css
    
      ## Uncomment these lines if you wish to show all errors on the screen.
      #php_value display_errors 1
      #php_value error_reporting 2047
      
      # enable expirations
			<IfModule mod_expires.c>
			  ExpiresActive On
			  ExpiresByType image/gif "access plus 1 month"
			  ExpiresByType image/png "access plus 1 month"
			  ExpiresByType image/jpg "access plus 1 month"
			  ExpiresByType image/jpeg "access plus 1 month"
			  ExpiresByType image/x-icon "access plus 1 month"
			  ExpiresByType text/css "access plus 2 weeks"
			  ExpiresByType application/javascript "access plus 2 weeks"
			</IfModule>
			  
			#Enable deflating (gzip) of content
			<IfModule mod_deflate.c>
			  # Insert filter
			  SetOutputFilter DEFLATE
			  
			  # Netscape 4.x has some problems...
			  BrowserMatch ^Mozilla/4 gzip-only-text/html
			  
			  # Netscape 4.06-4.08 have some more problems
			  BrowserMatch ^Mozilla/4\.0[678] no-gzip
			  
			  # MSIE masquerades as Netscape, but it is fine
			  # BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
			  
			  # NOTE: Due to a bug in mod_setenvif up to Apache 2.0.48
			  # the above regex won't work. You can use the following
			  # workaround to get the desired effect:
			  BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html
			  
			  # Don't compress images
			  SetEnvIfNoCase Request_URI \
			  \.(?:gif|jpe?g|png)$ no-gzip dont-vary
			</IfModule>
    </Directory>
</VirtualHost>

<VirtualHost *:443>
    ServerName test.vufind.co.wake.nc.us
    DocumentRoot "/usr/local/vufind-plus/vufind/web"
    CustomLog /var/log/vufind-plus/testvufind.co.wake.nc.us/access.log combined
    ErrorLog /var/log/vufind-plus/testvufind.co.wake.nc.us/error.log
    ErrorDocument 404 /Error/Handle404

    # SSL configuration below taken from wake county current vufind server. (certs copied over as well.) plb 3-18-2015

        #   SSL Engine Switch:
        #   Enable/Disable SSL for this virtual host.
        SSLEngine on

        #   A self-signed (snakeoil) certificate can be created by installing
        #   the ssl-cert package. See
        #   /usr/share/doc/apache2.2-common/README.Debian.gz for more info.
        #   If both key and certificate are stored in the same file, only the
        #   SSLCertificateFile directive is needed.
        SSLCertificateFile    /etc/ssl/certs/star_wakegov_com.crt
        SSLCertificateKeyFile /etc/ssl/private/star_wakegov_com.key

        #   Server Certificate Chain:
        #   Point SSLCertificateChainFile at a file containing the
        #   concatenation of PEM encoded CA certificates which form the
        #   certificate chain for the server certificate. Alternatively
        #   the referenced file can be the same as SSLCertificateFile
        #   when the CA certificates are directly appended to the server
        #   certificate for convinience.
        SSLCertificateChainFile /etc/ssl/certs/DigiCertCA.crt
        #SSLCertificateChainFile /etc/ssl/certs/TrustedRoot.crt

          #   Certificate Authority (CA):
          #   Set the CA certificate verification path where to find CA
          #   certificates for client authentication or alternatively one
          #   huge file containing all of them (file must be PEM encoded)
          #   Note: Inside SSLCACertificatePath you need hash symlinks
          #         to point to the certificate files. Use the provided
          #         Makefile to update the hash symlinks after changes.
          #SSLCACertificatePath /etc/ssl/certs/
          SSLCACertificateFile /etc/ssl/certs/TrustedRoot.crt

          #   Certificate Revocation Lists (CRL):
          #   Set the CA revocation path where to find CA CRLs for client
          #   authentication or alternatively one huge file containing all
          #   of them (file must be PEM encoded)
          #   Note: Inside SSLCARevocationPath you need hash symlinks
          #         to point to the certificate files. Use the provided
          #         Makefile to update the hash symlinks after changes.
          #SSLCARevocationPath /etc/apache2/ssl.crl/
          #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

          #   Client Authentication (Type):
          #   Client certificate verification type and depth.  Types are
          #   none, optional, require and optional_no_ca.  Depth is a
          #   number which specifies how deeply to verify the certificate
          #   issuer chain before deciding the certificate is not valid.
          #SSLVerifyClient require
          #SSLVerifyDepth  10

          #   Access Control:
          #   With SSLRequire you can do per-directory access control based
          #   on arbitrary complex boolean expressions containing server
          #   variable checks and other lookup directives.  The syntax is a
          #   mixture between C and Perl.  See the mod_ssl documentation
          #   for more details.
          #<Location />
          #SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
          #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
          #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
          #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
          #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
          #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
          #</Location>

          #   SSL Engine Options:
          #   Set various options for the SSL engine.
          #   o FakeBasicAuth:
          #     Translate the client X.509 into a Basic Authorisation.  This means that
          #     the standard Auth/DBMAuth methods can be used for access control.  The
          #     user name is the `one line' version of the client's X.509 certificate.
          #     Note that no password is obtained from the user. Every entry in the user
          #     file needs this password: `xxj31ZMTZzkVA'.
          #   o ExportCertData:
          #     This exports two additional environment variables: SSL_CLIENT_CERT and
          #     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
          #     server (always existing) and the client (only existing when client
          #     authentication is used). This can be used to import the certificates
          #     into CGI scripts.
          #   o StdEnvVars:
          #     This exports the standard SSL/TLS related `SSL_*' environment variables.
          #     Per default this exportation is switched off for performance reasons,
          #     because the extraction step is an expensive operation and is usually
          #     useless for serving static content. So one usually enables the
          #     exportation for CGI and SSI requests only.
          #   o StrictRequire:
          #     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
          #     under a "Satisfy any" situation, i.e. when it applies access is denied
          #     and no other module can change it.
          #   o OptRenegotiate:
          #     This enables optimized SSL connection renegotiation handling when SSL
          #     directives are used in per-directory context.
          #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire

          <FilesMatch "\.(cgi|shtml|phtml|php)$">
                  SSLOptions +StdEnvVars
          </FilesMatch>
          <Directory /usr/lib/cgi-bin>
                  SSLOptions +StdEnvVars
          </Directory>

          #   SSL Protocol Adjustments:
          #   The safe and default but still SSL/TLS standard compliant shutdown
          #   approach is that mod_ssl sends the close notify alert but doesn't wait for
          #   the close notify alert from client. When you need a different shutdown
          #   approach you can use one of the following variables:
          #   o ssl-unclean-shutdown:
          #     This forces an unclean shutdown when the connection is closed, i.e. no
          #     SSL close notify alert is send or allowed to received.  This violates
          #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
          #     this when you receive I/O errors because of the standard approach where
          #     mod_ssl sends the close notify alert.
          #   o ssl-accurate-shutdown:
          #     This forces an accurate shutdown when the connection is closed, i.e. a
          #     SSL close notify alert is send and mod_ssl waits for the close notify
          #     alert of the client. This is 100% SSL/TLS standard compliant, but in
          #     practice often causes hanging connections with brain-dead browsers. Use
          #     this only for browsers where you know that their SSL implementation
          #     works correctly.
          #   Notice: Most problems of broken clients are also related to the HTTP
          #   keep-alive facility, so you usually additionally want to disable
          #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
          #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
          #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
          #   "force-response-1.0" for this.
          BrowserMatch "MSIE [2-6]" \
                  nokeepalive ssl-unclean-shutdown \
                  downgrade-1.0 force-response-1.0
          # MSIE 7 and newer should be able to use keepalive
          BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown


    # SSL configuration above taken from wake county current vufind server. plb 3-18-2015


    <Directory /usr/local/vufind-plus/vufind/web/>
      Order allow,deny
      allow from all
      AllowOverride All

      # Uncomment the following lines, if you wish to use the Shibboleth authentication
      # AuthType shibboleth
      # require shibboleth

      # Friendly URLs
      #
      # You may need to adjust the RewriteBase to match your VuFind path.
      # You can remove the line if your vufind instance will be located at the web
      # server root.
      #
      <IfModule mod_rewrite.c>
        RewriteEngine	On

        RewriteCond %{THE_REQUEST} ^GET\ /MyResearch/
        RewriteRule ^MyResearch/OverdriveHolds /MyAccount/Holds$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/OverdriveCheckedOut /MyAccount/CheckedOut$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/EContentHolds /MyAccount/Holds$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/EContentCheckedOut /MyAccount/CheckedOut$1 [L,QSA,R=301]
        RewriteRule ^MyResearch/(.*) /MyAccount/$1 [L,R=301]

        # Note: The following RewriteRule directives include the [B] flag to escape
        # backreferences.  This prevents encoding problems caused by special characters
        # like & if they show up in ids.  Note that the flag doesn't work in some
        # versions of Apache prior to 2.2.12; if you run into trouble, try upgrading.
        RewriteRule   ^(MyAccount)/([^/]+)/(.+)$   index.php?module=$1&action=$2&id=$3   [B,L,QSA]
        RewriteRule   ^(Record)/([^/]+)/(.+)$       index.php?module=$1&id=$2&action=$3   [B,L,QSA]
        RewriteRule   ^(Record)/(.+)$               index.php?module=$1&id=$2             [B,L,QSA]
        RewriteRule   ^([^/]+)/(.+)$                index.php?module=$1&action=$2         [B,L,QSA]
      </IfModule>

      # Disable Magic Quotes
      php_value magic_quotes_gpc false

      # Session Settings
      php_value session.use_cookies  1
      php_value session.use_only_cookies 1
      # important: we want to serialize objects
      php_value session.auto_start 0
      #php_value session.cookie_secure 1
      # we should check session lifetime in "read" methods
      # since PHP cookies do not "refresh" them during activity
      # hence we leave them alive until browser closes
      php_value session.cookie_lifetime  0
      php_value session.gc_maxlifetime 6000

      # Dynamic CSS
      # AddType application/x-httpd-php .css

      ## Uncomment these lines if you wish to show all errors on the screen.
      #php_value display_errors 1
      #php_value error_reporting 2047

      # enable expirations
			<IfModule mod_expires.c>
			  ExpiresActive On
			  ExpiresByType image/gif "access plus 1 month"
			  ExpiresByType image/png "access plus 1 month"
			  ExpiresByType image/jpg "access plus 1 month"
			  ExpiresByType image/jpeg "access plus 1 month"
			  ExpiresByType image/x-icon "access plus 1 month"
			  ExpiresByType text/css "access plus 2 weeks"
			  ExpiresByType application/javascript "access plus 2 weeks"
			</IfModule>

			#Enable deflating (gzip) of content
			<IfModule mod_deflate.c>
			  # Insert filter
			  SetOutputFilter DEFLATE

			  # Netscape 4.x has some problems...
			  BrowserMatch ^Mozilla/4 gzip-only-text/html

			  # Netscape 4.06-4.08 have some more problems
			  BrowserMatch ^Mozilla/4\.0[678] no-gzip

			  # MSIE masquerades as Netscape, but it is fine
			  # BrowserMatch \bMSIE !no-gzip !gzip-only-text/html

			  # NOTE: Due to a bug in mod_setenvif up to Apache 2.0.48
			  # the above regex won't work. You can use the following
			  # workaround to get the desired effect:
			  BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html

			  # Don't compress images
			  SetEnvIfNoCase Request_URI \
			  \.(?:gif|jpe?g|png)$ no-gzip dont-vary
			</IfModule>
    </Directory>
</VirtualHost>