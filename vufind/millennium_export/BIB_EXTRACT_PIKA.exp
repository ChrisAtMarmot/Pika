#!/usr/bin/expect -f

#exp_internal 1 ; # verbose debugging to stdout
log_user 0 ; # do NOT send screens to stdout

# BIB_EXTRACT_PIKA.exp
# James Staub
# Nashville Public Library

# 20170504 :
# + removed ITEM STATUS b

# 20170127 :
# + removed ITEM STATUS p

# 20150619 :
# + rewrite of order record rules for new workflow. Exclude bibs with no order records whose CODE3 != s [SUPPRESSED]
# + fix mistake in rule 4 for online titles; before fix, few if any online titles were being extracted

# 20150616 :
# + exclude bibs with no obtainable items and order records with cdate = "  -  -  " AND status != z [cancelled] AND code3 != s [suppressed]
# + eliminate the following cdate criteria for order records in extract 3. ORDER CDATE between TODAY MINUS THREE WEEKS and "12-31-2037"
 
# 20150311 :
# + exclude bibs with no obtainable items and order records with cdate = "  -  -  " AND status = z [cancelled]

# 20150309 : 
# + exclude Hoopla records from Millennium extract [BCODE3=h]

# 20150222 : JAMES decides to scrap scheduler altogether to support Pika continuous reindexing
# This script is intended to be run once a day in preparation for a full index job
# JAMES has not verified that it works as expected in Pika
# + initiate Create List in lieu of waiting on Millennium Scheduler
# + JAMES renamed from VUFIND to PIKA

# 20140501
# Millennium 2011 1.6_3
# Millennium Scheduler cannot FTP files following the unfortunate update to 2011 1.6
# This script is our workaround
# NB: Millennium Scheduler still creates the Review File, and this script
# must be timed in cron to correspond with the appropriate times Millennium
# Scheduler completes a task
# 

set name "BIB_EXTRACT_PIKA"
set newFileName "${name}.TXT"
set env(TERM) xterm
set wait "2" ; # timeout
set timeout $wait

# READ ARGUMENTS
if {$argc != 2} {
        puts "Please provide a Pika site URL and a Millennium server/INNOPAC URL, e.g., $ expect BIB_HOLDS_EXTRACT_PIKA.exp catalog.library.nashville.org waldo.library.nashville.org"
        exit
}
set site [lindex $argv 0]
set host [lindex $argv 1]
set confpwd "/usr/local/VuFind-Plus/sites/$site/conf/config.pwd.ini"
if {[file exists $confpwd] != 1} {
        puts "Please check spelling of site $site; config.pwd.ini not found at $confpwd"
        exit
}
set localPath "/data/vufind-plus/$site/marc/"
if {[file exists $localPath] != 1} {
        puts "Please check spelling of site $site; /marc/ directory not found at $localPath"
        exit
}

# LOG FILE : write to it with
# puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> log entry"
set logFilePath "/var/log/vufind-plus/$site/$name.log"
if { [catch {open $logFilePath "a+"} logFile ] } {
  puts "Error could not open $logFilePath"
}
set logTimeStart [clock seconds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Start $name for $site on $host"
#puts "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Start $name for $site on $host"

# READ CONFIG.PWD.INI
set fd [open $confpwd r]
while {![eof $fd]} {
        set line [string trim [gets $fd] " "]
        if {$line == ""} continue
        switch -regexp -nocase -- $line {
                "^\\[Catalog Extract\\]" {
                        set section true
                }
                "^\\[" {
                        set section false
                }
                ^(INNOPAC|os) {
                        if {$section == true} {
                                set pair [split $line =]
                                set variable [string trim [lindex $pair 0]]
                                set value [string trim [lindex $pair 1]]
                                set $variable $value
                                # puts "$variable  = $value"
                        }
                }
                default {}
        }
}

# if 0 {

# INNOPAC : CONNECT
spawn ssh $INNOPACuser@$host
expect {
	# if RSA key for host is not yet set
	"Are you sure you want to continue connecting (yes/no)?" {
		send "yes\r"
		#expect "login as:"
		send "$INNOPACuser\r"
		expect "Password:"
		send "$INNOPACuserPassword\r"
	}
	"Password:" {
		send "$INNOPACuserPassword\r"
	}
}
expect "What kind of Terminal are you using?"
send "v"
expect "Please confirm: are you using a VT100 or compatible terminal?"
send "y"

# INNOPAC : CREATE LIST
expect "M > MANAGEMENT information"
send "M"
expect "L > Create LISTS of records"
send "L"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "Select review file to work on :"
send $INNOPACreviewFile
expect {
	"2 > Create a new file" { 
		send "2" 
	}
	"N > NEW BOOLEAN search, delete the review file" {
		send "N"
		expect "Are you sure you want to delete the current review file?"
		send "Y"
	}
}
expect "B > BIBLIOGRAPHIC list"
send "B"

##############
# BEGIN QUERY : EACH MILLENNIUM SERVER WILL NEED CUSTOM PARAMETERS!
##############

expect "Find BIBLIOGRAPHIC records that satisfy the following conditions"

# 1. ITEM  STATUS  matches  "[-!bcdfoqrst]"

expect "? Other Types"
send "?"
expect "I > ITEM"
send "I"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send -- "-"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "!"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "c"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "d"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "f"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "o"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "q"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "r"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "s"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#expect "Enter code in front of desired field"
#expect "24 STATUS:"
send "24"
#expect "Enter boolean condition"
send "="
send "t"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

# 2. ORDER CODE3 != S [SUPPRESSED]

expect "? Other Types"
send "?"
expect "O > ORDER"
send "O"
#expect "08 CODE3:"
send "08"
#expect "Enter boolean condition"
send "~"
#expect "CODE3" ; #[JAMES should see what the response is... ~ or does not equal or...
send "s"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

# 4. BIBLIOGRAPHIC  MARC Tag 856|u  not equal to  "" AND BCODE3 not equal to "h" [HOOPLA] or "n" [SUPPRESSED]
expect "? Other Types"
send "?"
expect "B > BIBLIOGRAPHIC"
send "B"
#expect "! MARC Tag:"
send "!"
#expect "MARC TAG tttii|ssss"
send "856|u"
send "\r"
#expect "Enter boolean condition"
send "~"
#expect "856|u <>"
#expect "Enter string ( limit of 50 characters )"
send "\r"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
send "h"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.05  BIBLIOGRAPHIC  LOCATION  equal to  "ar   " AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "ar   "
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.06  BIBLIOGRAPHIC  LOCATION  equal to  "arref" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "arref"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.1  BIBLIOGRAPHIC  LOCATION  equal to  "mnkan" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnkan"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.2  BIBLIOGRAPHIC  LOCATION  equal to  "mnmui" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnmui"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.3  BIBLIOGRAPHIC  LOCATION  equal to  "mnnas" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnnas"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.4  BIBLIOGRAPHIC  LOCATION  equal to  "mnncr" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnncr"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.5  BIBLIOGRAPHIC  LOCATION  equal to  "mnncs" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnncs"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.6  BIBLIOGRAPHIC  LOCATION  equal to  "mnndr" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnndr"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.7  BIBLIOGRAPHIC  LOCATION  equal to  "mnngr" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnngr"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.8  BIBLIOGRAPHIC  LOCATION  equal to  "mnnsr" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnnsr"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.9  BIBLIOGRAPHIC  LOCATION  equal to  "mnten" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "mnten"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "O"

#5.10  BIBLIOGRAPHIC  LOCATION  equal to  "nashv" AND BIBLIOGRAPHIC  BCODE3  not equal to  "n"
#expect "Enter code in front of desired field"
#expect "03 LOCATION:"
send "03"
#expect "Enter boolean condition"
send "="
send "nashv"
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "A"
#expect "Enter code in front of desired field"
#expect "07 BCODE3:"
send "07"
#expect "Enter boolean condition"
send "~"
#expect "BCODE3 <>"
send "n"

# START THE QUERY
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "S"
expect "What name would you like to give this file of records?"
send "$name\r"
set timeout -1
expect "BOOLEAN SEARCH COMPLETE"
set timeout $wait
send " "
expect -- "----LIST RECORDS----"
expect "Q > QUIT"
send "Q"
expect "Select review file to work on"
expect "Q > QUIT"
send "Q"
expect "*** MANAGEMENT INFORMATION ***"
expect "Q > QUIT"
send "Q"
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Create List completed"

# EXPORT MARC RECORDS
expect "A > ADDITIONAL system functions"
send "A"
expect "M > Read/write MARC records"
send "M"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "O > OUTPUT MARC records to another system using tape or FTS"
send "O"
expect "C > CREATE file of unblocked MARC records"
send "C"
expect "Enter name of file"
send "$name\r"
expect "File $name.out already exists!  Overwrite it? (y/n)"
send "y"
expect "$name.out exists, overwrite it?  (y/n)"
send "y"
expect "B > from a BOOLEAN review file"
send "B"
expect "Select review file to work on :"
# Cycle through the pages of results until we see ours
send "F"
set timeout 1
while {1} {
  expect -re "(\[0-9]+) > $name" {
    send $expect_out(1,string)
    break
  }
  send "F"
}
set timeout -1
expect "S > START sending records"
send "S"
expect "RECORD CONVERSION STATISTICS"
set timeout $wait
send "Q"
expect "Press <SPACE> to continue"
send " "
close
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> MARC extract prepared on $host"

#}

# MOVE OLD MRC TO SAV
if {[file exists "$localPath$name.MRC"] == 1} {
	file rename -force $localPath$name.MRC $localPath$name.SAV
}

spawn scp $osUser@$host:/iiidb/marc/$name.out $localPath/$name.MRC
set timeout -1
expect "Password"
send "$osUserPassword\r"
expect "100%"
close
set timeout $wait
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> MARC extract retrieved from $host"

# DELETE OUT FILE FROM MILLENNIUM SERVER
spawn ssh $INNOPACuser@$host
expect {
	# if RSA key for host is not yet set
	"Are you sure you want to continue connecting (yes/no)?" {
		send "yes\r"
		#expect "login as:"
		send "$INNOPACuser\r"
		expect "Password:"
		send "$INNOPACuserPassword\r"
	}
	"Password:" {
		send "$INNOPACuserPassword\r"
	}
}
expect "What kind of Terminal are you using?"
send "v"
expect "Please confirm: are you using a VT100 or compatible terminal?"
send "y"
expect "A > ADDITIONAL system functions"
send "A"
expect "M > Read/write MARC records"
send "M"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "O > OUTPUT MARC records to another system using tape or FTS"
send "O"
# ? James thinks script must read the screen now for filename, not after X command
expect -re "(\[0-9]+) > $name"
set nFileToDelete $expect_out(1,string)
expect "Choose one (B,C,P,D,R,F,U,V,T,S,X,Y,Q,+)"
send "X" ; # Remove file
expect "Input numbers of files to be removed"
send "$nFileToDelete\r"
expect "Remove file $name"
send "y"
expect "Choose one (B,C,P,D,R,F,U,V,T,S,X,Y,Q,+)"
send "q"
close
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> MARC extract deleted from Millennium server"

set logTimeStop [clock seconds]
set logTime [expr {$logTimeStop - $logTimeStart}]
set logTime [clock format $logTime -format "%M:%S"]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Completed $name for $site on $host in $logTime"
#puts "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Completed $name for $site on $host in $logTime"
close $logFile

exit 0
