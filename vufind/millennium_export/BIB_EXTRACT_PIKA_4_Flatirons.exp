#!/usr/bin/expect -f

exp_internal 0

# BIB_EXTRACT_PIKA.exp
# James Staub
# Nashville Public Library

# 20150222 : JAMES decides to scrap scheduler altogether to support Pika continuous reindexing
# This script is intended to be run once a day in preparation for a full index job
# JAMES has not verified that it works as expected in Pika
# + initiate Create List in lieu of waiting on Millennium Scheduler
# + JAMES renamed from VUFIND to PIKA

# 20140501
# Millennium 2011 1.6_3
# Millennium Scheduler cannot FTP files following the unfortunate update to 2011 1.6
# This script is our workaround
# NB: Millennium Scheduler still creates the Review File, and this script
# must be timed in cron to correspond with the appropriate times Millennium
# Scheduler completes a task
# 

set name "BIB_EXTRACT_PIKA"
set newFileName "${name}.TXT"
set env(TERM) xterm
set wait "2" ; # timeout
set timeout $wait

if {$argc != 2} {
        puts "Please provide a Pika site URL and a Millennium server/INNOPAC URL, e.g., $ expect BIB_HOLDS_EXTRACT_PIKA.exp catalog.library.nashville.org waldo.library.nashville.org"
        exit
}
set site [lindex $argv 0]
set host [lindex $argv 1]
set confpwd "/usr/local/vufind-plus/sites/$site/conf/config.pwd.ini"
if {[file exists $confpwd] != 1} {
        puts "Please check spelling of site $site; config.pwd.ini not found at $confpwd"
        exit
}
set localPath "/data/vufind-plus/$site/marc"
if {[file exists $localPath] != 1} {
        puts "Please check spelling of site $site; /marc/ directory not found at $localPath"
        exit
}

set fd [open $confpwd r]
while {![eof $fd]} {
        set line [string trim [gets $fd] " "]
        if {$line == ""} continue
        switch -regexp -nocase -- $line {
                "^\\[Catalog Extract\\]" {
                        set section true
                }
                "^\\[" {
                        set section false
                }
                ^(INNOPAC|os) {
                        if {$section == true} {
                                set pair [split $line =]
                                set variable [string trim [lindex $pair 0]]
                                set value [string trim [lindex $pair 1]]
                                set $variable $value
                                # puts "$variable  = $value"
                        }
                }
                default {}
        }
}

#if 0 {
spawn ssh $INNOPACuser@$host
expect {
	# if RSA key for host is not yet set
	"Are you sure you want to continue connecting (yes/no)?" {
		send "yes\r"
		#expect "login as:"
		send "$INNOPACuser\r"
		expect "Password:"
		send "$INNOPACuserPassword\r"
	}
	"password:" {
		send "$INNOPACuserPassword\r"
	}
}
expect "M > MANAGEMENT information"
send "M"
expect "L > Create LISTS of records"
send "L"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "Select review file to work on :"
send $INNOPACreviewFile
expect {
	"2 > Create a new file" { 
		send "2" 
	}
	"N > NEW BOOLEAN search, delete the review file" {
		send "N"
		expect "Are you sure you want to delete the current review file?"
		send "Y"
	}
}
expect "B > BIBLIOGRAPHIC list"
send "B"

##############
# BEGIN QUERY : EACH MILLENNIUM SERVER WILL NEED CUSTOM PARAMETERS!
##############

expect "Find BIBLIOGRAPHIC records that satisfy the following conditions"
# Send Record Number
send "09"
expect "RECORD #"
send ">"
# expect?
send "0"

# START THE QUERY
#expect "Enter action ( A for AND, O for OR, S to START search )"
send "S"
expect "What name would you like to give this file of records?"
send "$name\r"
set timeout -1
expect "BOOLEAN SEARCH COMPLETE"
set timeout $wait
send " "
expect -- "----LIST RECORDS----"
expect "Q > QUIT"
send "Q"
expect "Select review file to work on"
expect "Q > QUIT"
send "Q"
expect "*** MANAGEMENT INFORMATION ***"
expect "Q > QUIT"
send "Q"

# EXPORT MARC RECORDS
expect "A > ADDITIONAL system functions"
send "A"
expect "M > Read/write MARC records"
send "M"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "M > OUTPUT MARC records to another system using tape or FTS"
send "M"
expect "C > CREATE file of unblocked MARC records"
send "C"
expect "Enter name of file"
send "$name\r"
# This does not always happen so wrap in a conditional
expect {
	"Overwrite it" {
		send "y"
	}
}
#There is a second prompt that happens if the file already exists
expect {
	"overwrite it" {
		send "y"
	}
}
expect "B > from a BOOLEAN review file"
send "B"
expect "Select review file to work on :"
send "001"
set timeout -1
expect "S > START sending records"
send "S"
expect "RECORD CONVERSION STATISTICS"
set timeout $wait
send "Q"
expect "Press <SPACE> to continue"
send " "
close

spawn scp $osUser@$host:/iiidb/marc/$name.out $localPath/$name.MRC
set timeout -1
expect "100%"
close
set timeout $wait

# DELETE OUT FILE FROM MILLENNIUM SERVER
spawn ssh $INNOPACuser@$host
expect {
	# if RSA key for host is not yet set
	"Are you sure you want to continue connecting (yes/no)?" {
		send "yes\r"
		#expect "login as:"
		send "$INNOPACuser\r"
		expect "password:"
		send "$INNOPACuserPassword\r"
	}
	"password:" {
		send "$INNOPACuserPassword\r"
	}
}
expect "What kind of Terminal are you using?"
send "v"
expect "Please confirm: are you using a VT100 or compatible terminal?"
send "y"
expect "A > ADDITIONAL system functions"
send "A"
expect "M > Read/write MARC records"
send "M"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "M > OUTPUT MARC records to another system using FTS"
send "M"
# We may get a notice that the total size is too large
expect {
	"Your files title more than"{
		send " "
	}
}
# ? James thinks script must read the screen now for filename, not after X command
expect -re "(\[0-9]+) > $name"
set nFileToDelete $expect_out(1,string)
expect "Choose one"
send "X" ; # Remove file
expect "Input numbers of files to be removed"
send "$nFileToDelete\r"
expect "Remove file $name"
send "y"
expect "Choose one"
send "q"
close

exit 0
